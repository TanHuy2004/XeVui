const express = require('express');
const { sql, poolPromise } = require('../config/db');

const router = express.Router();

router.use(express.json());

// API Th√™m kh√°ch h√†ng
router.post('/customer', async (req, res) => {
    try {
        console.log("üì• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ client:", req.body);
        
        const { customerID, customerName, customerPhone, customerEmail, customerAddress } = req.body;

        if (!customerID || !customerName || !customerPhone || !customerEmail || !customerAddress) {
            console.log("‚ö†Ô∏è Thi·∫øu th√¥ng tin ƒë·∫ßu v√†o!");
            return res.status(400).json({ message: 'Th√¥ng tin kh√¥ng ƒë·∫ßy ƒë·ªß' });
        }

        const pool = await poolPromise;

        // Ki·ªÉm tra ID kh√°ch h√†ng ƒë√£ t·ªìn t·∫°i
        const checkCustomerQuery = `SELECT 1 FROM Customer WHERE ID_KH = @customerID`;
        const checkCustomerResult = await pool.request()
            .input('customerID', sql.VarChar, customerID)
            .query(checkCustomerQuery);

        if (checkCustomerResult.recordset.length > 0) {
            console.log("‚ö†Ô∏è M√£ kh√°ch h√†ng ƒë√£ t·ªìn t·∫°i!");
            return res.status(409).json({ field: "customerID", message: "M√£ kh√°ch h√†ng ƒë√£ t·ªìn t·∫°i!" });
        }

        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i
        const checkPhoneQuery = `SELECT 1 FROM Customer WHERE SDT = @customerPhone`;
        const checkPhoneResult = await pool.request()
            .input('customerPhone', sql.VarChar, customerPhone)
            .query(checkPhoneQuery);

        if (checkPhoneResult.recordset.length > 0) {
            console.log("‚ö†Ô∏è S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i!");
            return res.status(409).json({ field: "customerPhone", message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i!" });
        }

        // Ki·ªÉm tra s·ªë Email ƒë√£ t·ªìn t·∫°i
        const checkEmailQuery = `SELECT 1 FROM Customer WHERE Email = @customerEmail`;
        const checkEmailResult = await pool.request()
            .input('customerEmail', sql.VarChar, customerEmail)
            .query(checkEmailQuery);

        if (checkEmailResult.recordset.length > 0) {
            console.log("‚ö†Ô∏è Email ƒë√£ t·ªìn t·∫°i!");
            return res.status(409).json({ field: "customerEmail", message: "Email ƒë√£ t·ªìn t·∫°i!" });
        }

        // Th√™m kh√°ch h√†ng m·ªõi v√†o database
        const insertQuery = `INSERT INTO Customer (ID_KH, Ten_KH, SDT, Email, DiaChi) VALUES (@customerID, @customerName, @customerPhone, @customerEmail, @customerAddress)`;
        console.log("üìù Th·ª±c thi truy v·∫•n SQL:", insertQuery);

        await pool.request()
            .input('customerID', sql.VarChar, customerID)
            .input('customerName', sql.NVarChar, customerName)
            .input('customerPhone', sql.VarChar, customerPhone)
            .input('customerEmail', sql.VarChar, customerEmail)
            .input('customerAddress', sql.NVarChar, customerAddress)
            .query(insertQuery);

        console.log("‚úÖ Th√™m kh√°ch h√†ng th√†nh c√¥ng!");
        res.status(201).json({ message: 'Th√™m kh√°ch h√†ng th√†nh c√¥ng!' });

    } catch (err) {
        console.error("‚ùå L·ªói server:", err);
        res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
});

// API L·∫•y th√¥ng tin kh√°ch h√†ng
router.get('/customer', async (req, res) => {
    try {
        console.log("üì• Y√™u c·∫ßu l·∫•y danh s√°ch kh√°ch h√†ng");

        const pool = await poolPromise;

        if (!pool) {
            console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database");
            return res.status(500).json({ message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database' });
        }

        const selectQuery = `SELECT ID_KH AS customerID, Ten_KH AS customerName, SDT AS customerPhone, Email AS customerEmail, DiaChi AS customerAddress FROM Customer`;
        console.log("üìù Th·ª±c thi truy v·∫•n SQL:", selectQuery);

        const result = await pool.request().query(selectQuery);


        console.log("‚úÖ L·∫•y danh s√°ch kh√°ch h√†ng th√†nh c√¥ng!");
        res.status(200).json(result.recordset);
    } catch (err) {
        console.error("‚ùå L·ªói server:", err);
        res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
});


// API C·∫≠p nh·∫≠t kh√°ch h√†ng
router.put('/customer', async (req, res) => {
    try {
        console.log("üì• D·ªØ li·ªáu c·∫≠p nh·∫≠t t·ª´ client:", req.body);

        const { customerID, customerName, customerPhone, customerEmail, customerAddress } = req.body;

        if (!customerID || !customerName || !customerPhone || !customerEmail || !customerAddress) {
            console.log("‚ö†Ô∏è Thi·∫øu th√¥ng tin ƒë·∫ßu v√†o!");
            return res.status(400).json({ message: 'Th√¥ng tin kh√¥ng ƒë·∫ßy ƒë·ªß' });
        }

        const pool = await poolPromise;

        // Ki·ªÉm tra xem m√£ kh√°ch h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
        const checkCustomerQuery = `SELECT 1 FROM Customer WHERE ID_KH = @customerID`;
        console.log("üîç Ki·ªÉm tra m√£ kh√°ch h√†ng:", checkCustomerQuery);
        const checkCustomerResult = await pool.request()
            .input('customerID', sql.VarChar, customerID)
            .query(checkCustomerQuery);

        if (checkCustomerResult.recordset.length === 0) {
            console.log("‚ö†Ô∏è M√£ kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i!");
            return res.status(404).json({ message: 'M√£ kh√°ch h√†ng ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω!' });
        }

        // N·∫øu t·ªìn t·∫°i, ti·∫øn h√†nh c·∫≠p nh·∫≠t
        const updateQuery = `UPDATE Customer SET Ten_KH = @customerName, SDT = @customerPhone, Email = @customerEmail, DiaChi = @customerAddress WHERE ID_KH = @customerID`;
        console.log("üìù Th·ª±c thi truy v·∫•n SQL:", updateQuery);

        await pool.request()
            .input('customerID', sql.VarChar, customerID)
            .input('customerName', sql.NVarChar, customerName)
            .input('customerPhone', sql.VarChar, customerPhone)
            .input('customerEmail', sql.VarChar, customerEmail)
            .input('customerAddress', sql.NVarChar, customerAddress)
            .query(updateQuery);

        console.log("‚úÖ C·∫≠p nh·∫≠t kh√°ch h√†ng th√†nh c√¥ng!");
        res.status(200).json({ message: 'S·ª≠a kh√°ch h√†ng th√†nh c√¥ng!' });

    } catch (err) {
        console.error("‚ùå L·ªói server:", err);
        res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
});

// API X√≥a kh√°ch h√†ng
router.delete('/customer/:customerID', async (req, res) => {
    try {
        const { customerID } = req.params;
        console.log("üóëÔ∏è Y√™u c·∫ßu x√≥a kh√°ch h√†ng v·ªõi ID:", customerID);

        if (!customerID || customerID.length !== 5) {
            console.log("‚ö†Ô∏è ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá!");
            return res.status(400).json({ message: 'ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá. M√£ ph·∫£i c√≥ ƒë√∫ng 5 k√Ω t·ª±.' });
        }

        const pool = await poolPromise;

        // Ki·ªÉm tra xem kh√°ch h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
        const checkCustomerQuery = `SELECT 1 FROM Customer WHERE ID_KH = @customerID`;
        const checkCustomerResult = await pool.request()
            .input('customerID', sql.VarChar, customerID)
            .query(checkCustomerQuery);

        if (checkCustomerResult.recordset.length === 0) {
            console.log("‚ö†Ô∏è Kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i!");
            return res.status(404).json({ message: 'M√£ kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i' });
        }

        // X√≥a kh√°ch h√†ng
        const deleteQuery = `DELETE FROM Customer WHERE ID_KH = @customerID`;
        console.log("üìù Th·ª±c thi truy v·∫•n SQL:", deleteQuery);

        await pool.request()
            .input('customerID', sql.VarChar, customerID)
            .query(deleteQuery);

        console.log("‚úÖ X√≥a kh√°ch h√†ng th√†nh c√¥ng!");
        res.status(200).json({ message: 'X√≥a kh√°ch h√†ng th√†nh c√¥ng!' });
    } catch (err) {
        console.error("‚ùå L·ªói server:", err);
        res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
});

module.exports = router;