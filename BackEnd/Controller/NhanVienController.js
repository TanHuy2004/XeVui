const express = require('express'); 
const { sql, poolPromise } = require('../config/db');

const router = express.Router();

router.use(express.json());

// API Th√™m nh√¢n vi√™n
router.post('/employee', async (req, res) => {
    try {
        console.log("üì• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ client:", req.body); // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o

        const { employeeID, employeeName, employeeRole, employeePhone } = req.body;

        if (!employeeID || !employeeName || !employeeRole || !employeePhone) {
            console.log("‚ö†Ô∏è Thi·∫øu th√¥ng tin ƒë·∫ßu v√†o!");
            return res.status(400).json({ message: 'Th√¥ng tin kh√¥ng ƒë·∫ßy ƒë·ªß' });
        }

        const pool = await poolPromise;

        // Ki·ªÉm tra ID nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i
        const checkEmployeeQuery = `SELECT 1 FROM Employee WHERE ID_NV = @employeeID`;
        const checkEmployeeResult = await pool.request()
        .input('employeeID', sql.VarChar, employeeID)
        .query(checkEmployeeQuery);

        if (checkEmployeeResult.recordset.length > 0) {
            return res.status(400).json({ message: 'M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i' });
        }

// Ki·ªÉm tra S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i
        const checkPhoneQuery = `SELECT 1 FROM Employee WHERE SDT = @employeePhone`;
        const checkPhoneResult = await pool.request()
        .input('employeePhone', sql.VarChar, employeePhone)
        .query(checkPhoneQuery);

        if (checkPhoneResult.recordset.length > 0) {
            return res.status(409).json({ field: "employeePhone", message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i!" });
        }


        // Th√™m nh√¢n vi√™n m·ªõi v√†o database
        const insertQuery = `INSERT INTO Employee (ID_NV, Ten_NV, ChucVu, SDT) VALUES (@employeeID, @employeeName, @employeeRole, @employeePhone)`;
        console.log("üìù Th·ª±c thi truy v·∫•n SQL:", insertQuery);

        await pool.request()
            .input('employeeID', sql.VarChar, employeeID)
            .input('employeeName', sql.NVarChar, employeeName)
            .input('employeeRole', sql.NVarChar, employeeRole)
            .input('employeePhone', sql.VarChar, employeePhone)
            .query(insertQuery);

        console.log("‚úÖ Th√™m nh√¢n vi√™n th√†nh c√¥ng!");
        res.status(201).json({ message: 'Th√™m nh√¢n vi√™n th√†nh c√¥ng!' });

    } catch (err) {
        console.error("‚ùå L·ªói server:", err);
        res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
});

// API L·∫•y th√¥ng tin nh√¢n vi√™n
router.get('/employee', async (req, res) => {
    try {
        console.log("üì• Y√™u c·∫ßu l·∫•y danh s√°ch nh√¢n vi√™n");

        const pool = await poolPromise;

        // Ki·ªÉm tra k·∫øt n·ªëi database
        if (!pool) {
            console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database");
            return res.status(500).json({ message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database' });
        }

        // L·∫•y danh s√°ch nh√¢n vi√™n t·ª´ database
        const selectQuery = `SELECT ID_NV AS employeeID, Ten_NV AS employeeName, ChucVu AS employeeRole, SDT AS employeePhone FROM Employee`;
        console.log("üìù Th·ª±c thi truy v·∫•n SQL:", selectQuery);

        const result = await pool.request().query(selectQuery);

        if (!result.recordset || result.recordset.length === 0) {
            console.log("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu nh√¢n vi√™n");
            return res.status(404).json({ message: 'Kh√¥ng c√≥ d·ªØ li·ªáu nh√¢n vi√™n' });
        }

        console.log("‚úÖ L·∫•y danh s√°ch nh√¢n vi√™n th√†nh c√¥ng!");
        res.status(200).json(result.recordset);
    } catch (err) {
        console.error("‚ùå L·ªói server:", err);
        res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
});

// API C·∫≠p nh·∫≠t nh√¢n vi√™n
router.put('/employee', async (req, res) => {
    try {
        console.log("üì• D·ªØ li·ªáu c·∫≠p nh·∫≠t t·ª´ client:", req.body); // Log incoming data

        const { employeeID, employeeName, employeeRole, employeePhone } = req.body;

        if (!employeeID || !employeeName || !employeeRole || !employeePhone) {
            console.log("‚ö†Ô∏è Thi·∫øu th√¥ng tin ƒë·∫ßu v√†o!"); // Log missing data
            return res.status(400).json({ message: 'Th√¥ng tin kh√¥ng ƒë·∫ßy ƒë·ªß' });
        }

        const pool = await poolPromise;

        // Ki·ªÉm tra xem m√£ nh√¢n vi√™n c√≥ t·ªìn t·∫°i kh√¥ng
        const checkEmployeeQuery = `SELECT 1 FROM Employee WHERE ID_NV = @employeeID`;
        console.log("üîç Ki·ªÉm tra m√£ nh√¢n vi√™n:", checkEmployeeQuery); // Log query
        const checkEmployeeResult = await pool.request()
            .input('employeeID', sql.VarChar, employeeID)
            .query(checkEmployeeQuery);

            
        if (checkEmployeeResult.recordset.length === 0) {
            console.log("‚ö†Ô∏è M√£ nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i!"); // Log non-existent ID
            return res.status(404).json({ message: 'M√£ nh√¢n vi√™n ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω!' });
        }

        // N·∫øu t·ªìn t·∫°i, ti·∫øn h√†nh c·∫≠p nh·∫≠t
        const updateQuery = `UPDATE Employee SET Ten_NV = @employeeName, ChucVu = @employeeRole, SDT = @employeePhone WHERE ID_NV = @employeeID`;
        console.log("üìù Th·ª±c thi truy v·∫•n SQL:", updateQuery); // Log update query

        await pool.request()
            .input('employeeID', sql.VarChar, employeeID)
            .input('employeeName', sql.NVarChar, employeeName)
            .input('employeeRole', sql.NVarChar, employeeRole)
            .input('employeePhone', sql.VarChar, employeePhone)
            .query(updateQuery);

        console.log("‚úÖ C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng!");
        res.status(200).json({ message: 'S·ª≠a nh√¢n vi√™n th√†nh c√¥ng!' });

    } catch (err) {
        console.error("‚ùå L·ªói server:", err); // Log server error
        res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
});
router.delete('/employee/:employeeID', async (req, res) => {
    try {
        const { employeeID } = req.params;
        
        if (!employeeID) {
            return res.status(400).json({ message: "M√£ nh√¢n vi√™n kh√¥ng h·ª£p l·ªá!" });
        }

        const pool = await poolPromise;

        const checkQuery = `SELECT 1 FROM Employee WHERE ID_NV = @employeeID`;
        const checkResult = await pool.request()
            .input('employeeID', sql.VarChar, employeeID)
            .query(checkQuery);

        if (checkResult.recordset.length === 0) {
            return res.status(404).json({ message: "Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i!" });
        }

        const deleteQuery = `DELETE FROM Employee WHERE ID_NV = @employeeID`;
        await pool.request()
            .input('employeeID', sql.VarChar, employeeID)
            .query(deleteQuery);

        console.log(`‚úÖ ƒê√£ x√≥a nh√¢n vi√™n ${employeeID} th√†nh c√¥ng!`);  // Ki·ªÉm tra server log

        res.status(200).json({ message: 'X√≥a nh√¢n vi√™n th√†nh c√¥ng!' });
    } catch (err) {
        console.error("‚ùå L·ªói server:", err);
        res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
});

module.exports = router;